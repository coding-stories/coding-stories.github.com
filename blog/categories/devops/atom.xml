<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | Coding Stories]]></title>
  <link href="http://coding-stories.github.com/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://coding-stories.github.com/"/>
  <updated>2015-08-24T12:27:25+02:00</updated>
  <id>http://coding-stories.github.com/</id>
  <author>
    <name><![CDATA[Jean-Christophe Sirot]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Continuous Delivery with Jenkins workflow and Docker]]></title>
    <link href="http://coding-stories.github.com/blog/2015/08/23/continuous-delivery-with-jenkins-workflow-and-docker/"/>
    <updated>2015-08-23T18:49:00+02:00</updated>
    <id>http://coding-stories.github.com/blog/2015/08/23/continuous-delivery-with-jenkins-workflow-and-docker</id>
    <content type="html"><![CDATA[<p>Recently Cloudbees releases the <a href="https://wiki.jenkins-ci.org/display/JENKINS/CloudBees+Docker+Workflow+Plugin">CloudBees Docker Workflow Plugin</a> to make the integration of Docker with Jenkins workflows as easy as possible. Now, deploying a continuous delivery pipeline is (almost) straightforward. Here is a simple but comprehensive example.</p>

<!-- more -->


<p><strong>Disclaimer</strong>: I'm using a maven project for this example because maven a tool I'm comfortable with. This post could be adapted to python, rails or whatever-you-want project with minor efforts.</p>

<p>First of all, we need to install the required plugins in Jenkins:</p>

<ul>
<li>Workflow: Aggregator</li>
<li>CloudBees Docker Workflow</li>
</ul>


<p>This sample workflow is simple and composed of 4 steps:</p>

<ol>
<li>Build and unit tests</li>
<li>Build Docker image</li>
<li>Acceptance Tests</li>
<li>Push Docker image</li>
</ol>


<h1>Build and unit tests</h1>

<p>In a new Workflow job enter this script:</p>

<p>```groovy
node {</p>

<pre><code>/* Configure the JDK to use. 'JDK8' is the symbolic name under which the JDK
 * is defined in the global Jenkins configuration. */
env.JAVA_HOME="${tool 'JDK8'}"

stage 'Build'
/* Clone the project from github */
git url: 'https://github.com/jcsirot/atmosphere-calculator.git', branch: '0.1.0'
/* Select the maven configuration. 'M3' is the symbolic name used the
 * global Jenkins configuration. */
def mvnHome = tool "M3"
/* Run maven: build and run the unit tests  */
sh "${mvnHome}/bin/mvn clean package"
/* This is the syntax for using a generic step. Here the test results are archived. */
step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
</code></pre>

<p>}
```</p>

<p>This short script runs maven to build the jars and to execute the unit tests. Now we are ready to build the Docker image.</p>

<h1>Build Docker image</h1>

<p>The CloudBees Docker Workflow Plugin provides a global variable <code>docker</code> which offers access to the common Docker functions in workflow scripts. For a comprehensive description of the plugin and the available commands, look at the <a href="http://documentation.cloudbees.com/docs/cje-user-guide/docker-workflow.html">plugin guide</a>.</p>

<p>To build the image we call <code>build</code> on the <code>docker</code> variable. Two parameters are passed: the image name (with the Docker notation <code>[registry/]image[:tag]</code>) and the directory where is located the <code>Dockerfile</code>.</p>

<p>```groovy
node {</p>

<pre><code>/* ... */
stage 'Build Docker image'
def image = docker.build('jcsirot/atmo-calc:snapshot', '.')
</code></pre>

<p>}
```</p>

<p>The call returns a handle on the built image so we can work with it.</p>

<h1>Acceptance Tests</h1>

<p>In order to execute the acceptance tests we wants to run a container from our newly built image. The <code>withRun</code> method can be invoked on the image handle. It is possible to pass the <code>docker run</code> parameters like port mapping or volumes configuration.</p>

<p><code>withRun</code> also takes a code block. The container is started at the begining of the block, then the code in the block is executed and the container is stopped at the end of the block. Note that the block is executed on the Jenkins node, <strong>not inside the container</strong>. Use the <code>inside</code> method on the image handle to execute code inside the container.</p>

<p>```groovy
node {</p>

<pre><code>/* ... */
stage 'Acceptance Tests'
image.withRun('-p 8181:8181') {c -&gt;
    sh "${mvnHome}/bin/mvn verify"
}
/* Archive acceptance tests results */
step([$class: 'JUnitResultArchiver', testResults: '**/target/failsafe-reports/TEST-*.xml'])
</code></pre>

<p>}
```</p>

<h1>Push Docker image</h1>

<p>The last step consists in pushing the image to a Docker registry. It can be done with the method <code>push</code>.</p>

<p>In order to configure the registry credentials, go the Jenkins Manager Credentials page. Add a new username/password entry and enter your registry login and password. Click on <strong>Advanced</strong> to show the ID field and enter a unique identifier.</p>

<p><img class="center" src="/images/posts/jenkins-docker-credentials-20150823.png" title="'Docker Hub Credentials'" ></p>

<p>The <code>withRegistry</code> method is also used to pass the registry URL and credentials ID configure above.</p>

<p>```groovy
node {</p>

<pre><code>/* ... */
stage 'Push image'
docker.withRegistry("https://registry.hub.docker.com", "docker-registry") {
    image.push()
}
</code></pre>

<p>}
```</p>

<p>The image is pushed and, unless you pushed it to a custom registry, should be available on the <a href="https://hub.docker.com/">Docker hub</a>.</p>

<h1>What's next?</h1>

<p>This example is simple and far from being perfect. Feel free to share suggestions or questions in the comments.</p>

<ul>
<li>The project I used for this sample: <a href="https://github.com/jcsirot/atmosphere-calculator">https://github.com/jcsirot/atmosphere-calculator</a></li>
<li>The workflow script: <a href="https://gist.github.com/jcsirot/4de001d280998f27aa82">https://gist.github.com/jcsirot/4de001d280998f27aa82</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
