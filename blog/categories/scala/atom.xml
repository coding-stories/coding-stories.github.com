<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scala | Coding Stories]]></title>
  <link href="http://coding-stories.github.com/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://coding-stories.github.com/"/>
  <updated>2015-08-26T12:21:13+02:00</updated>
  <id>http://coding-stories.github.com/</id>
  <author>
    <name><![CDATA[Jean-Christophe Sirot]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Parser des parties d’échecs avec Scala Parser Combinators]]></title>
    <link href="http://coding-stories.github.com/blog/2011/01/12/parser-des-parties-dechecs-avec-scala-parser-combinators/"/>
    <updated>2011-01-12T07:51:00+01:00</updated>
    <id>http://coding-stories.github.com/blog/2011/01/12/parser-des-parties-dechecs-avec-scala-parser-combinators</id>
    <content type="html"><![CDATA[<p>Un morceau de code scala écrit il y a quelques mois quand j’ai commencé à jouer avec scala. Il utilise l’API <a href="http://www.scala-lang.org/api/current/scala/util/parsing/combinator/Parsers.html">parser combinators</a> de scala pour décoder des parties d’échecs au format [PGN].</p>

<p><div><script src='https://gist.github.com/774261.js?file=PGNParser.scala'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala 2.8.0]]></title>
    <link href="http://coding-stories.github.com/blog/2010/07/14/scala-2-8-0/"/>
    <updated>2010-07-14T07:37:00+02:00</updated>
    <id>http://coding-stories.github.com/blog/2010/07/14/scala-2-8-0</id>
    <content type="html"><![CDATA[<p>Il aura fallu attendre sept <em>release candidates</em>, 3 mois depuis la sortie de la RC1 et presque 6 mois depuis la première beta, mais la version finale 2.8.0 du langage Scala est finalement disponible au téléchargement.</p>

<p>Heureusement pour nous remercier de notre patiente les nouveautés sont nombreuses : meilleure API pour les collections, amélioration du support des annotations, amélioration de la bibliothèque XML, spécialisation des types, ajout d’un décompilateur, l’outil scaladoc en version 2…</p>

<p>Pour voir la liste complète des améliorations, nouveautés et corrections ou télécharger c’est ici : <a href="http://www.scala-lang.org/node/7009">http://www.scala-lang.org/node/7009</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crible d’Ératosthène en Scala]]></title>
    <link href="http://coding-stories.github.com/blog/2010/05/20/crible-deratosthene-en-scala/"/>
    <updated>2010-05-20T15:50:00+02:00</updated>
    <id>http://coding-stories.github.com/blog/2010/05/20/crible-deratosthene-en-scala</id>
    <content type="html"><![CDATA[<p>Le <a href="http://fr.wikipedia.org/wiki/Crible_d">crible d’Ératosthène</a> est un grand classique des langages fonctionnels :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">primes</span> <span class="o">(</span><span class="n">end</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">sieve</span> <span class="o">(</span><span class="n">list</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">list</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Nil</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">List</span><span class="o">()</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">x</span> <span class="o">::</span> <span class="n">xs</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">List</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">++</span> <span class="n">sieve</span><span class="o">(</span><span class="n">xs</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span> <span class="o">%</span> <span class="n">x</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'>  <span class="n">sieve</span><span class="o">(</span><span class="nc">List</span><span class="o">.</span><span class="n">range</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">end</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Faisons un test :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">primes</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">13</span><span class="o">,</span> <span class="mi">17</span><span class="o">,</span> <span class="mi">19</span><span class="o">,</span> <span class="mi">23</span><span class="o">,</span> <span class="mi">29</span><span class="o">,</span> <span class="mi">31</span><span class="o">,</span> <span class="mi">37</span><span class="o">,</span> <span class="mi">41</span><span class="o">,</span> <span class="mi">43</span><span class="o">,</span> <span class="mi">47</span><span class="o">,</span> <span class="mi">53</span><span class="o">,</span> <span class="mi">59</span><span class="o">,</span> <span class="mi">61</span><span class="o">,</span> <span class="mi">67</span><span class="o">,</span> <span class="mi">71</span><span class="o">,</span> <span class="mi">73</span><span class="o">,</span> <span class="mi">79</span><span class="o">,</span> <span class="mi">83</span><span class="o">,</span> <span class="mi">89</span><span class="o">,</span> <span class="mi">97</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quicksort en Scala]]></title>
    <link href="http://coding-stories.github.com/blog/2010/05/17/quicksort-en-scala/"/>
    <updated>2010-05-17T23:21:00+02:00</updated>
    <id>http://coding-stories.github.com/blog/2010/05/17/quicksort-en-scala</id>
    <content type="html"><![CDATA[<p>Retour aux racines du génie logiciel : le tri. Tout développeur doit savoir écrire un tri en moins de 5 minutes.</p>

<p>Comment faire un quicksort en Scala ?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">sort</span> <span class="o">(</span><span class="n">list</span> <span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span> <span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">list</span> <span class="k">match</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="nc">Nil</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">list</span>
</span><span class='line'><span class="k">case</span> <span class="n">x</span> <span class="o">::</span> <span class="n">xs</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">sort</span><span class="o">(</span><span class="n">xs</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">x</span><span class="o">))</span> <span class="o">++</span> <span class="nc">List</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">++</span> <span class="n">sort</span><span class="o">(</span><span class="n">xs</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="k">=</span> <span class="n">x</span><span class="o">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ça marche pour les int. Mais si je veux trier des float, des String, des Scoubidou ? Il faudrait généraliser la fonction. Pour cela il existe le trait `Ordered qui permet de définir une relation d’ordre total sur les éléments.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">sort</span> <span class="o">[</span><span class="kt">A</span> <span class="kt">&amp;lt</span><span class="err">;</span><span class="kt">%</span> <span class="kt">Ordered</span><span class="o">[</span><span class="kt">A</span><span class="o">]]</span> <span class="o">(</span><span class="n">list</span><span class="k">:</span><span class="kt">Seq</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">list</span> <span class="k">match</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="nc">Nil</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">list</span>
</span><span class='line'><span class="k">case</span> <span class="n">x</span> <span class="o">::</span> <span class="n">xs</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">sort</span><span class="o">(</span><span class="n">xs</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">x</span><span class="o">))</span> <span class="o">++</span> <span class="nc">List</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">++</span> <span class="n">sort</span><span class="o">(</span><span class="n">xs</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="k">=</span> <span class="n">x</span><span class="o">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>L’expression `[A &lt;% Ordered[A]] est une <em>view bound</em>. Cela permet de définir une fonction polymorphique mais aussi fournit la conversion implicite du type A en Ordered[A]. En fait cette définition :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">sort</span> <span class="o">[</span><span class="kt">A</span> <span class="kt">&amp;lt</span><span class="err">;</span><span class="kt">%</span> <span class="kt">Ordered</span><span class="o">[</span><span class="kt">A</span><span class="o">]]</span> <span class="o">(</span><span class="n">list</span><span class="k">:</span><span class="kt">Seq</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="o">...</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>est équivalente à :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">sort</span> <span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">(</span><span class="n">list</span><span class="k">:</span><span class="kt">Seq</span><span class="o">[</span><span class="kt">A</span><span class="o">])(</span><span class="k">implicit</span> <span class="n">conv</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Ordered</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="o">...</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Avantage : l’objet <code>scala.Predef</code> qui est tourjours chargé par Scala possède déjà plusieurs fonctions implicites de converstion par exemple <code>Int</code> vers <code>Ordered[Int]</code>.</p>

<p>Et si maintenant nous compararions nos scoubidous ?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Scoubidou</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">samy</span> <span class="k">=</span> <span class="nc">Scoubidou</span><span class="o">(</span><span class="s">&quot;Samy&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">daphne</span> <span class="k">=</span> <span class="nc">Scoubidou</span><span class="o">(</span><span class="s">&quot;Daphne&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">sort</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="n">samy</span><span class="o">,</span> <span class="n">daphne</span><span class="o">))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">error</span><span class="k">:</span> <span class="kt">no</span> <span class="kt">implicit</span> <span class="kt">argument</span> <span class="kt">matching</span> <span class="kt">parameter</span> <span class="k">type</span> <span class="o">(</span><span class="kt">Scoubidou</span><span class="o">)</span> <span class="o">=&gt;</span> <span class="nc">Ordered</span><span class="o">[</span><span class="kt">Scoubidou</span><span class="o">]</span> <span class="n">was</span> <span class="n">found</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<p>Et oui, sort attend un <code>Ordered</code>. Bien sûr nous pourrions nous arranger pour que Scoubidou étende le trait Ordered mais parfois ce n’est simplement pas possible, par exemple parce que le type est fournit par une bibliothèque sur laquelle on n’a pas la main. Mais il est possible de définir une fonction implicite de conversion qui trie les Scoubidou selon l’ordre lexicographique (en clair on va déléguer l’appel à compare au champ name).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">def</span> <span class="n">scoubidou2ordered</span> <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Scoubidou</span><span class="o">)</span><span class="k">:</span> <span class="kt">Ordered</span><span class="o">[</span><span class="kt">Scoubidou</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">new</span> <span class="nc">Ordered</span><span class="o">[</span><span class="kt">Scoubidou</span><span class="o">]</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">compare</span><span class="o">(</span><span class="n">that</span><span class="k">:</span> <span class="kt">Scoubidou</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">compare</span><span class="o">(</span><span class="n">that</span><span class="o">.</span><span class="n">name</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>et maintenant on peut trier la liste :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">sort</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="n">samy</span><span class="o">,</span> <span class="n">daphne</span><span class="o">))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">Seq</span><span class="o">[</span><span class="kt">Scoubidou</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="nc">Scoubidou</span><span class="o">(</span><span class="nc">Daphne</span><span class="o">),</span> <span class="nc">Scoubidou</span><span class="o">(</span><span class="nc">Samy</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>
]]></content>
  </entry>
  
</feed>
