<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: test | Coding Stories]]></title>
  <link href="http://coding-stories.github.com/blog/categories/test/atom.xml" rel="self"/>
  <link href="http://coding-stories.github.com/"/>
  <updated>2015-08-26T12:21:13+02:00</updated>
  <id>http://coding-stories.github.com/</id>
  <author>
    <name><![CDATA[Jean-Christophe Sirot]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Continuous Delivery with Jenkins workflow and Docker]]></title>
    <link href="http://coding-stories.github.com/blog/2015/08/23/continuous-delivery-with-jenkins-workflow-and-docker/"/>
    <updated>2015-08-23T18:49:00+02:00</updated>
    <id>http://coding-stories.github.com/blog/2015/08/23/continuous-delivery-with-jenkins-workflow-and-docker</id>
    <content type="html"><![CDATA[<p>Recently Cloudbees releases the <a href="https://wiki.jenkins-ci.org/display/JENKINS/CloudBees+Docker+Workflow+Plugin">CloudBees Docker Workflow Plugin</a> to make the integration of Docker with Jenkins workflows as easy as possible. Now, deploying a continuous delivery pipeline is (almost) straightforward. Here is a simple but comprehensive example.</p>

<!-- more -->


<p><strong>Disclaimer</strong>: I'm using a maven project for this example because maven a tool I'm comfortable with. This post could be adapted to python, rails or whatever-you-want project with minor efforts.</p>

<p>First of all, we need to install the required plugins in Jenkins:</p>

<ul>
<li>Workflow: Aggregator</li>
<li>CloudBees Docker Workflow</li>
</ul>


<p>This sample workflow is simple and composed of 4 steps:</p>

<ol>
<li>Build and unit tests</li>
<li>Build Docker image</li>
<li>Acceptance Tests</li>
<li>Push Docker image</li>
</ol>


<h1>Build and unit tests</h1>

<p>In a new Workflow job enter this script:</p>

<p>```groovy
node {</p>

<pre><code>/* Configure the JDK to use. 'JDK8' is the symbolic name under which the JDK
 * is defined in the global Jenkins configuration. */
env.JAVA_HOME="${tool 'JDK8'}"

stage 'Build'
/* Clone the project from github */
git url: 'https://github.com/jcsirot/atmosphere-calculator.git', branch: '0.1.0'
/* Select the maven configuration. 'M3' is the symbolic name used the
 * global Jenkins configuration. */
def mvnHome = tool "M3"
/* Run maven: build and run the unit tests  */
sh "${mvnHome}/bin/mvn clean package"
/* This is the syntax for using a generic step. Here the test results are archived. */
step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
</code></pre>

<p>}
```</p>

<p>This short script runs maven to build the jars and to execute the unit tests. Now we are ready to build the Docker image.</p>

<h1>Build Docker image</h1>

<p>The CloudBees Docker Workflow Plugin provides a global variable <code>docker</code> which offers access to the common Docker functions in workflow scripts. For a comprehensive description of the plugin and the available commands, look at the <a href="http://documentation.cloudbees.com/docs/cje-user-guide/docker-workflow.html">plugin guide</a>.</p>

<p>To build the image we call <code>build</code> on the <code>docker</code> variable. Two parameters are passed: the image name (with the Docker notation <code>[registry/]image[:tag]</code>) and the directory where is located the <code>Dockerfile</code>.</p>

<p>```groovy
node {</p>

<pre><code>/* ... */
stage 'Build Docker image'
def image = docker.build('jcsirot/atmo-calc:snapshot', '.')
</code></pre>

<p>}
```</p>

<p>The call returns a handle on the built image so we can work with it.</p>

<h1>Acceptance Tests</h1>

<p>In order to execute the acceptance tests we wants to run a container from our newly built image. The <code>withRun</code> method can be invoked on the image handle. It is possible to pass the <code>docker run</code> parameters like port mapping or volumes configuration.</p>

<p><code>withRun</code> also takes a code block. The container is started at the begining of the block, then the code in the block is executed and the container is stopped at the end of the block. Note that the block is executed on the Jenkins node, <strong>not inside the container</strong>. Use the <code>inside</code> method on the image handle to execute code inside the container.</p>

<p>```groovy
node {</p>

<pre><code>/* ... */
stage 'Acceptance Tests'
image.withRun('-p 8181:8181') {c -&gt;
    sh "${mvnHome}/bin/mvn verify"
}
/* Archive acceptance tests results */
step([$class: 'JUnitResultArchiver', testResults: '**/target/failsafe-reports/TEST-*.xml'])
</code></pre>

<p>}
```</p>

<h1>Push Docker image</h1>

<p>The last step consists in pushing the image to a Docker registry. It can be done with the method <code>push</code>.</p>

<p>In order to configure the registry credentials, go the Jenkins Manager Credentials page. Add a new username/password entry and enter your registry login and password. Click on <strong>Advanced</strong> to show the ID field and enter a unique identifier.</p>

<p><img class="center" src="/images/posts/jenkins-docker-credentials-20150823.png" title="'Docker Hub Credentials'" ></p>

<p>The <code>withRegistry</code> method is also used to pass the registry URL and credentials ID configure above.</p>

<p>```groovy
node {</p>

<pre><code>/* ... */
stage 'Push image'
docker.withRegistry("https://registry.hub.docker.com", "docker-registry") {
    image.push()
}
</code></pre>

<p>}
```</p>

<p>The image is pushed and, unless you pushed it to a custom registry, should be available on the <a href="https://hub.docker.com/">Docker hub</a>.</p>

<h1>What's next?</h1>

<p>This example is simple and far from being perfect. Feel free to share suggestions or questions in the comments.</p>

<ul>
<li>The project I used for this sample: <a href="https://github.com/jcsirot/atmosphere-calculator">https://github.com/jcsirot/atmosphere-calculator</a></li>
<li>The workflow script: <a href="https://gist.github.com/jcsirot/4de001d280998f27aa82">https://gist.github.com/jcsirot/4de001d280998f27aa82</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocker un serveur de mail avec Dumbster et JUnit]]></title>
    <link href="http://coding-stories.github.com/blog/2012/08/05/mocker-un-serveur-de-mail-avec-dumbster-et-junit/"/>
    <updated>2012-08-05T20:29:00+02:00</updated>
    <id>http://coding-stories.github.com/blog/2012/08/05/mocker-un-serveur-de-mail-avec-dumbster-et-junit</id>
    <content type="html"><![CDATA[<p>Récemment, en écrivant des tests d’intégration j’ai rencontré un cas d’utilisation qui arrive fréquemment : un utilisateur s’inscrit à un service Web, un courriel lui est envoyé, il contient une URL permettant de confirmer son inscription. La question est comment tester ça automatiquement, par exemple dans un test <a href="http://seleniumhq.org/">Selenium</a> ?</p>

<!--more-->


<h1>La solution technique</h1>

<p>Première idée : créer un compte mail dédié pour ce test qu’on va interroger avec une bibliothèque comme <a href="http://www.oracle.com/technetwork/java/javamail/index.html">javamail</a>. Cette solution présente toutefois quelques problèmes. D’abord il va falloir maintenir cette boîte mail dans le temps. Ensuite si le serveur SMTP ou le serveur POP/IMAP est indisponible le test va échouer. Et que va-t-il se passer si deux tests sont lancés en même temps ? Finalement une solution qui me semble bien fragile.</p>

<p>Seconde idée : <em>mocker</em> un serveur SMTP qu’on ne lance que le temps du test. Après quelques rapides recherches j’ai trouvé <a href="http://quintanasoft.com/dumbster/">Dumbster</a>, un serveur qui répond aux requêtes SMTP mais sans relayer les messages envoyés. Ceux-ci sont stockés et peuvent ensuite être examinés.</p>

<h1>Intégration avec JUnit</h1>

<p>Pour intégrer Dumbster avec JUnit, j’ai écrit une <a href="http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/TestRule.html"><em>TestRule</em></a>. Les <code>TestRule</code> de JUnit sont des classes qui permettent de modifier la façon dont une méthode de test (ou un ensemble de méthodes) va se comporter en exécutant du code avant ou après le test. C’est un moyen très pratique de factoriser des comportements qu’on est amené à utiliser souvent dans les tests : par exemple <a href="http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/TemporaryFolder.html"><em>TemporaryFolder</em></a> permet de créer des répertoires et des fichiers temporaire et de les supprimer à la fin du test, <a href="http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/Timeout.html"><em>Timeout</em></a> s’assure que les tests ne dépasseront une durée maximale donnée…</p>

<p>Pour le mock de serveur, j’ai créé une classe <code>MockSMTPRule</code> qui étend la classe abstraite <a href="http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/ExternalResource.html"><em>ExternalResource</em></a>. Cette classe fournit deux méthodes <code>before</code> et <code>after</code> qui s’exécutent respectivement avant et après la méthode de test ; parfait donc pour gérer des ressources externe au test.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MockSMTPRule</span> <span class="kd">extends</span> <span class="n">ExternalResource</span>
</span><span class='line'><span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="kd">public</span> <span class="n">SimpleSmtpServer</span> <span class="n">server</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Lance le serveur SMTP sur le port 2525 avant le test */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Throwable</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">before</span><span class="o">();</span>
</span><span class='line'>    <span class="n">server</span> <span class="o">=</span> <span class="n">SimpleSmtpServer</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="mi">2525</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Arrête le serveur une fois le test terminé */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">server</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">after</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Il faudra également configurer l’application web pour utiliser le serveur qui sera lancé sur localhost, port 2525.</p>

<p>Ensuite, utiliser cette <code>TestRule</code> dans un test est extrêmement simple. Il suffit de créer une variable d’instance publique dans la classe de test et de la préfixer avec l’annotation <code>@Rule</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RegistrationTest</span> <span class="kd">extends</span> <span class="n">JUnit4TestBase</span>
</span><span class='line'><span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Rule</span>
</span><span class='line'><span class="kd">public</span> <span class="n">MockSMTPRule</span> <span class="n">smtp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MockSMTPRule</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Test the registration */</span>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_send_confirmation_email</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="cm">/* Ouvrir la page à tester */</span>
</span><span class='line'>    <span class="n">openPage</span><span class="o">(</span><span class="s">&quot;http://localhost:8080/register/&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/* Saisir les informations sur le nouvel utilisateur */</span>
</span><span class='line'>    <span class="cm">/* ... */</span>
</span><span class='line'>    <span class="cm">/* On teste qu&#39;un mail a été reçu */</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">smtp</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">getReceivedEmailSize</span><span class="o">());</span>
</span><span class='line'>    <span class="n">SmtpMessage</span> <span class="n">msg</span> <span class="o">=</span> <span class="o">(</span><span class="n">SmtpMessage</span><span class="o">)</span> <span class="n">smtp</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">getReceivedEmail</span><span class="o">().</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>    <span class="cm">/* On teste les champs To, From et Subject */</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;[Service Trop Bien] Confirmation de votre inscription&quot;</span><span class="o">,</span> <span class="n">msg</span><span class="o">.</span><span class="na">getHeaderValue</span><span class="o">(</span><span class="s">&quot;Subject&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;john@example.com&quot;</span><span class="o">,</span> <span class="n">msg</span><span class="o">.</span><span class="na">getHeaderValue</span><span class="o">(</span><span class="s">&quot;To&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;no-reply@servicetropbien.com&quot;</span><span class="o">,</span> <span class="n">msg</span><span class="o">.</span><span class="na">getHeaderValue</span><span class="o">(</span><span class="s">&quot;From&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="cm">/* On teste le corps du mail */</span>
</span><span class='line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">getBody</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;Bienvenue&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Le code complet de la classe est ici : <a href="https://gist.github.com/3246719">https://gist.github.com/3246719</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exclure certaines classes de la couverture des tests unitaires]]></title>
    <link href="http://coding-stories.github.com/blog/2012/01/30/exclure-certaines-classes-de-la-couverture-des-tests-unitaires/"/>
    <updated>2012-01-30T21:39:00+01:00</updated>
    <id>http://coding-stories.github.com/blog/2012/01/30/exclure-certaines-classes-de-la-couverture-des-tests-unitaires</id>
    <content type="html"><![CDATA[<p>Dans nos projets on rencontre souvent ce cas de figure : certaines portions de code se prêtent mal au test unitaire. Ce sont les interfaces graphiques, le code qui manipule des fichiers, les connexions réseaux… Cela peut poser problème lorsqu’on configure Sonar pour lever des alertes quand la couverture de code est trop faible.</p>

<!--more-->


<p>Le problème a déjà été posé car Il y a un ticket dans le JIRA de Sonar (<a href="http://jira.codehaus.org/browse/SONAR-766">SONAR-766</a>). Quand il aura été résolu Sonar devrait permettre de configurer ce qui doit être exclu de l’analyse de couverture des tests.</p>

<p>En attendant comment faire ? En posant la question il y a quelques mois sur Twitter j’avais reçu une réponse de Damien Gouyette :</p>

<p><img class="center" src="/images/posts/sonar-cobertura-tweet-20120130.png"></p>

<p>J’ai fini par trouver le temps de tester et ça fonctionne ! Il est possible de régler ces règles d’exclusion en adaptant par la configuration du plugin cobertura dans le POM de notre projet :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.codehaus.mojo<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>cobertura-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;configuration&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>instrumentation<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>excludes<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>exclude<span class="ni">&amp;gt;</span>com/mycompany/gui/**/*.class<span class="ni">&amp;lt;</span>/exclude<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>exclude<span class="ni">&amp;gt;</span>com/mycompany/nontestable/**/*.class<span class="ni">&amp;lt;</span>/exclude<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>/excludes<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/instrumentation<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>De cette façon les classes correspondant au <em>pattern</em> indiqué sont exclues de l’analyse par cobertura et ainsi ignorées par Sonar. Le taux de couverture est donc calculé sur le code considéré comme testable. La métrique devient alors beaucoup plus intéressante pour l’évaluation de la qualité globale du projet.</p>

<p><strong>Note</strong> : Attention, je parle bien sûr de test unitaire ; il ne faut pas confondre un code qui ne peut pas être testé unitairement avec un code pour lequel les tests sont possibles mais difficiles à écrire. En outre il est toujours possible de tester autrement, avec des tests d’intégration ou des tests de <em>user experience</em> par exemple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Couverture des tests d’intégration avec JaCoCo, Maven et Sonar]]></title>
    <link href="http://coding-stories.github.com/blog/2012/01/23/couverture-des-tests-dintegration-avec-jacoco-maven-et-sonar/"/>
    <updated>2012-01-23T07:16:00+01:00</updated>
    <id>http://coding-stories.github.com/blog/2012/01/23/couverture-des-tests-dintegration-avec-jacoco-maven-et-sonar</id>
    <content type="html"><![CDATA[<p>Sur certains de mes projets maven j’aimerai pouvoir séparer les tests unitaires des tests d’intégration. Les tests d’intégration sont souvent moins stables, pas toujours reproductibles et ils prennent souvent trop de temps pour être exécutés par les développeurs à chaque compilation.</p>

<!-- more -->


<h1>Déplacer les tests dans un module dédié</h1>

<p>Première chose à faire, créer un module dédié dans le projet maven pour y mettre uniquement les tests d’intégration. Voilà la structure globale du projet :</p>

<p>Error processing input, expected syntax: {% img [class name(s)] [http[s]:/]/path/to/image [width [height]] [title text | "title text" ["alt text"]] %}</p>

<p>Ensuite pour empêcher que le module <code>libfoo-it</code> ne se lance à chaque compilation on crée un profil maven dédié aux test d’intégration dans le fichier <code>pom.xml</code> principal.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;profiles&gt;</span>
</span><span class='line'>  <span class="nt">&lt;profile&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>id<span class="ni">&amp;gt;</span>run-its<span class="ni">&amp;lt;</span>/id<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>modules<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>module<span class="ni">&amp;gt;</span>libfoo-it<span class="ni">&amp;lt;</span>/module<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/modules<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/profile&gt;</span>
</span><span class='line'><span class="nt">&lt;/profiles&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>Utiliser maven-failsafe-plugin</h1>

<p>Le <a href="http://maven.apache.org/plugins/maven-failsafe-plugin/">plugin failsafe</a> permet de lancer les test d’intégration lors d’un build maven tout comme le plugin surefire le fait avec les tests unitaires. Le plugin failsafe s’attache aux phases <em>integration-test</em> et <em>verify</em> du <a href="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html">cycle de vie du build</a>.</p>

<p>Comme il n’est pas possible de configurer plusieurs répertoires contenant les tests dans maven, la discrimination entre tests unitaires et d’intégration se fait sur le nom des classes. Il ne faudra donc pas oublier de nommer correctement ses classes de test.</p>

<p>Les <em>templates</em> par défaut sont les suivants :</p>

<ul>
<li><strong>tests unitaires</strong> : <strong>/*Test.java, </strong>/Test<em>.java, **/</em>TestCase.java</li>
<li><strong>tests d’intégration</strong> : <strong>/*IT.java, </strong>/IT<em>.java, **/</em>ITCase.java</li>
</ul>


<p>On ajoute ensuite la configuration du plugin failsafe dans notre profil.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;profiles&gt;</span>
</span><span class='line'>  <span class="nt">&lt;profile&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>id<span class="ni">&amp;gt;</span>run-its<span class="ni">&amp;lt;</span>/id<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>modules<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>module<span class="ni">&amp;gt;</span>libfoo-it<span class="ni">&amp;lt;</span>/module<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/modules<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>build<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>pluginManagement<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>plugins<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>maven-failsafe-plugin<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>version<span class="ni">&amp;gt;</span>2.11<span class="ni">&amp;lt;</span>/version<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>executions<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>execution<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>goals<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>goal<span class="ni">&amp;gt;</span>integration-test<span class="ni">&amp;lt;</span>/goal<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/goals<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>/execution<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/executions<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>/plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/plugins<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>/pluginManagement<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/build<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/profile&gt;</span>
</span><span class='line'><span class="nt">&lt;/profiles&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Le POM du sous-projet libfoo-it est également à mettre à jour. De cette façon, petite optimisation, le plugin failsafe ne sera lancé que dans le module qui contient les tests d’intégration.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[/~]$ mvn -Prun-its clean verify</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>Couverture de code avec JaCoCo</h1>

<p>Avoir des tests c’est bien, calculer la couverture de ces tests c’est mieux. Pour cela nous allons utiliser le moteur de couverture de code <a href="http://www.eclemma.org/jacoco/">JaCoCo</a> (Java Code Coverage), plus adapté aux tests d’intégration que le bien connu Cobertura.</p>

<p>JaCoCo est fournit sous la forme d’un agent à lancer avec la JVM. Heureusement, il existe un plugin maven pour JaCoCo qui va nous aider à l’intégrer dans le build. Le plugin maven JaCoCo dispose d’un goal <em>prepare-agent</em> qui va dans un premier temps télécharger l’agent et dans un second temps créer une variable maven contenant la configuration de l’agent qu’il suffira de passer en paramètre au plugin failsafe.</p>

<p>Voilà ce que donne la configuration du plugin (<strong>Nota</strong>: j’utilise la version 5.3 du plugin JaCoCo car les versions suivantes ne semblent pas fonctionner avec maven 2.2.1) :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;profiles&gt;</span>
</span><span class='line'>  <span class="nt">&lt;profile&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>id<span class="ni">&amp;gt;</span>run-its<span class="ni">&amp;lt;</span>/id<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>modules<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>module<span class="ni">&amp;gt;</span>libfoo-it<span class="ni">&amp;lt;</span>/module<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/modules<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>build<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>pluginManagement<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>plugins<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>org.jacoco<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>maven-jacoco-plugin<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>version<span class="ni">&amp;gt;</span>0.5.3.201107060350<span class="ni">&amp;lt;</span>/version<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>executions<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>execution<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>phase<span class="ni">&amp;gt;</span>pre-integration-test<span class="ni">&amp;lt;</span>/phase<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>goals<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>goal<span class="ni">&amp;gt;</span>prepare-agent<span class="ni">&amp;lt;</span>/goal<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/goals<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>/execution<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/executions<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>propertyName<span class="ni">&amp;gt;</span>it.failsafe.argLine<span class="ni">&amp;lt;</span>/propertyName<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>destFile<span class="ni">&amp;gt;</span>${it.jacoco.destFile}<span class="ni">&amp;lt;</span>/destFile<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>/plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>maven-failsafe-plugin<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>version<span class="ni">&amp;gt;</span>2.11<span class="ni">&amp;lt;</span>/version<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>executions<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>execution<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>goals<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>goal<span class="ni">&amp;gt;</span>integration-test<span class="ni">&amp;lt;</span>/goal<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/goals<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>/execution<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/executions<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>argLine<span class="ni">&amp;gt;</span>${it.failsafe.argLine}<span class="ni">&amp;lt;</span>/argLine<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>/plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/plugins<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>/pluginManagement<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/build<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>properties<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>it.jacoco.destFile<span class="ni">&amp;gt;</span>${java.io.tmpdir}/jacoco-foo.dump<span class="ni">&amp;lt;</span>/it.jacoco.destFile<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/properties<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/profile&gt;</span>
</span><span class='line'><span class="nt">&lt;/profiles&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Le plugin JaCoCo va générer la configuration de l’agent pour lancer les tests et la placer dans variable <code>it.failsafe.argLine</code>. Ensuite on configure le paramètre <code>argLine du plugin failsafe avec cette variable. On définit également le fichier qui va collecter les données de couverture (avec paramètre</code>destFile).</p>

<p>Il faut également mettre à jour le POM du module contenant les tests :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;build&gt;</span>
</span><span class='line'>  <span class="nt">&lt;plugins&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>org.jacoco<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>maven-jacoco-plugin<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/plugin<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>maven-failsafe-plugin<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/plugin<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/build&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>Couverture avec Sonar</h1>

<p>Maintenant que nous avons nos données de couverture dans un fichier, il serait intéressant de les faire digérés à Sonar lors de son analyse. Depuis la version 2.12, <a href="http://www.sonarsource.org/">Sonar</a> est livré avec le plugin JaCoCo ; pour les précédentes il faudra l’installer depuis l’<em>update center</em>.</p>

<p>Le plugin JaCoCo de Sonar attend à trouver le chemin vers le fichier de collecte des données dans la variable `sonar.jacoco.itReportPath. Il est possible de configurer ce chemin dans l’interface web de Sonar (menu <em>settings</em>, catégorie <em>JaCoCo</em>, paramètre <em>File with execution data for integration tests</em>) mais cette variable peut également être configurée dans le POM.</p>

<p>Voilà donc la version définitive du profil :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;profiles&gt;</span>
</span><span class='line'>  <span class="nt">&lt;profile&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>id<span class="ni">&amp;gt;</span>run-its<span class="ni">&amp;lt;</span>/id<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>modules<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>module<span class="ni">&amp;gt;</span>libfoo-it<span class="ni">&amp;lt;</span>/module<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/modules<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>build<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>pluginManagement<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>plugins<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>org.jacoco<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>maven-jacoco-plugin<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>version<span class="ni">&amp;gt;</span>0.5.3.201107060350<span class="ni">&amp;lt;</span>/version<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>executions<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>execution<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>phase<span class="ni">&amp;gt;</span>pre-integration-test<span class="ni">&amp;lt;</span>/phase<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>goals<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>goal<span class="ni">&amp;gt;</span>prepare-agent<span class="ni">&amp;lt;</span>/goal<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/goals<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>/execution<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/executions<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>propertyName<span class="ni">&amp;gt;</span>it.failsafe.argLine<span class="ni">&amp;lt;</span>/propertyName<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>destFile<span class="ni">&amp;gt;</span>${it.jacoco.destFile}<span class="ni">&amp;lt;</span>/destFile<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>/plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>maven-failsafe-plugin<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>version<span class="ni">&amp;gt;</span>2.11<span class="ni">&amp;lt;</span>/version<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>executions<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>execution<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>goals<span class="ni">&amp;gt;</span>
</span><span class='line'>              <span class="ni">&amp;lt;</span>goal<span class="ni">&amp;gt;</span>integration-test<span class="ni">&amp;lt;</span>/goal<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/goals<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>/execution<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/executions<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>          <span class="ni">&amp;lt;</span>argLine<span class="ni">&amp;gt;</span>${it.failsafe.argLine}<span class="ni">&amp;lt;</span>/argLine<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>/plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/plugins<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>/pluginManagement<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/build<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>properties<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>it.jacoco.destFile<span class="ni">&amp;gt;</span>${java.io.tmpdir}/jacoco-foo.dump<span class="ni">&amp;lt;</span>/it.jacoco.destFile<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>sonar.jacoco.itReportPath<span class="ni">&amp;gt;</span>${it.jacoco.destFile}<span class="ni">&amp;lt;</span>/sonar.jacoco.itReportPath<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/properties<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/profile&gt;</span>
</span><span class='line'><span class="nt">&lt;/profiles&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Il ne reste plus qu’à lancer l’analyse avec Sonar :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[/~]$ mvn -Prun-its clean verify sonar:sonar</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finalement, après avoir ajouté le widget Integration test coverage dans le dashboard, on obtient ce résultat :</p>

<p><img class="center" src="/images/posts/sonar-coverage-it-20120123.png" title="'Code coverage avec Sonar'" ></p>

<h1>Pistes d’améliorations</h1>

<p>Cette solution est un peu brute de décoffrage et pour dire vrai entre le début de l’écriture de ce post et maintenant j’ai eu quelques idées pour l’améliorer :</p>

<ul>
<li>Passer la configuration du profil dans un super POM dont héritent tous les projets. En effet, mis à part le paramètre `destFile il n’y a rien de spécifique dans cette configuration. On pourrait même imaginer la génération d’un nom de fichier aléatoire à chaque lancement.</li>
<li>Utiliser plusieurs modules de tests d’intégration. Pour cela il faut mettre le paramètre supplémentaire <code>append</code> à <em>true</em> dans le plugin maven JaCoCo afin que les données d’exécution de tous les modules soient collectées dans le même fichier.</li>
</ul>


<p>Et si vous avez d’autres idées, n’hésitez pas à les poster dans les commentaires.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GTAC 2011 : les vidéos sont en ligne]]></title>
    <link href="http://coding-stories.github.com/blog/2011/11/24/gtac-2011-les-videos-sont-en-ligne/"/>
    <updated>2011-11-24T08:54:00+01:00</updated>
    <id>http://coding-stories.github.com/blog/2011/11/24/gtac-2011-les-videos-sont-en-ligne</id>
    <content type="html"><![CDATA[<p>Intéressés par la qualité et le test logiciel ? Les vidéos des différentes sessions de la conférence GTAC 2011 sont désormais disponibles sur <a href="http://www.gtac.biz/talks">http://www.gtac.biz/talks</a> ou sur la chaîne Youtube <a href="http://www.youtube.com/user/GoogleTechTalks">Google Tech Talks</a>. Bon visionnage !</p>
]]></content>
  </entry>
  
</feed>
